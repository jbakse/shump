#Basic Requirements

-	Title Screen
	+-	Instructions
	+-	Start

-	Factoring
	-	change exports on modules that are single class example( `new Game()`, not `new Game.Game()` )

-	Game Play
	+-	Game Sequencing
		+-	Work on Game Class to make it handle the major events (birth, death, level changes, game over, etc)
		+-	Game Class can control hud as well
		+-	Should be listenging to events probably


	+-	Compositing Engine
		+-	Clean up the way the world is rendered. Deal with multiple cameras/scenes in a graph.
			graph might be like this

			


	-	Level
		-	Level Class should deal with stepping the camera
			+-	pumping the collision detector
			+-	dispatching events
			-	reacting to in game event triggers (killing boss, opening door when switch hit)
		
		+-	start loading level from Tiled level editor
		+-	load tiles
		+-	clean up tile loader
		
		-	clean up tile loader more, make arbitray background counts with data loaded paralax distances
		-	merge tile geometry: http://learningthreejs.com/blog/2011/10/05/performance-merging-geometry/

	-	Documentation
		-	Document the main classes from which things inherit
			-	Game Object
			-	Collision Object
			-	Methods, Events, Properties

	-	Collsion Interface
		+-	Formalize functions for providing bounding box, hitTarget(), takeHit()....

	-	Player
		+-	Move
		+-	Shoot
		+-	Die when hit
		+-	Life counter
		+-	0 live, game over

	-	Backgrounds
		+- background
		+- far background(paralax)
		
	-	Enemies
		-	Need three kinds
		+-	Move
		+-	Shoot
		+-	Die when hit
		
		- Abstract Enemy (see bullet, abstract)

	-	Bullet
		-	is there  a cleaner way to override the model on the EnemyBullet? Maybe by making material a property rather than private?
		-	maybe just make an abstract bullet that doesn't have a model, and make bullet and enemy bullet extend and skin
		
	-	Boss
		-	 Multi hits to kill
		-	 Display health?
		-	 Dies
		
	-	Bullets
		+-	Move
		+-	Kill when hit other team
	
	-	Explosions
		+- particles
		- use particle pool

	-	Score
		+-	track
		+-	show
	
	-	Asset Loading
		-	look at existing batch loading js conventions
		-	want texture loader, sound loader, model loaders
		-	want centralized loading progress manager that can track all of the different asset types
		-	smart preloading
		-	start when assets are ready!
		-	show progress

	-	Sound
		- music
		+- fx
		- fx post processing (echo effect maybe?)

	-	Post FX
		+-	Quick and Dirty
		-	Factor Post FX out to own class

	+-	Full Screen

	-	Memory
		-	Reduce Garbage Colleciton

-	Game Over Screen
	+-	Return to Title Screen on Keypress   


-	Graphics
-	Music
-	Sound FX







Notes:


onto screen
				onto texture
					~ blank
					+ render level
					* post fx
					+ render game over
					* post fx
